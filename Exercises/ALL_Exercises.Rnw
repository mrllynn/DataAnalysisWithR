
% -----------------------------------------------------------------------------
% IMPLEMENTING THE DOCUMENT AND ITS OPTIONS
% -----------------------------------------------------------------------------

\documentclass[11pt]{article}
\usepackage[left=21mm, right=18mm, top=20mm, bottom=18mm]{geometry}
\linespread{1.4}

% *****************************************************************************
% ADD HERE THE TOPIC OF THE LECTURE!
% \newcommand{\exercisetopic}{ALL EXERCISES}
\newcommand{\exercisetopic}{Day 6}
% *****************************************************************************

% Add information about the title section of the file
\author{Sonja Hartnack, Terence Odoch \& Muriel Buri}
\date{\today}
\title{\vspace{-3ex}Practical Exercises for \textbf{\exercisetopic}}
\date{October 2017}

\usepackage[round,sectionbib]{natbib} \bibliographystyle{ims}
\usepackage{graphicx}
\usepackage{float}
\usepackage{url}
\usepackage{color}
\usepackage{amsmath, amssymb}
\usepackage{colortbl, xcolor} % enable colored rows in table
\usepackage{color} % enable colored rows in table
\usepackage{bibentry} % Include Full BibTeX Entry Inside Slides
\usepackage{nicefrac}
\usepackage{soul}

\graphicspath{{figures/}}

% Adjusting font type
\usepackage[sfdefault,lf]{carlito}
\usepackage[T1]{fontenc}
\renewcommand*\oldstylenums[1]{\carlitoOsF #1}

% Add footer and header to the file
\usepackage{lastpage}
\usepackage{fancyhdr}
\renewcommand{\headrulewidth}{0.4pt}% Default \headrulewidth is 0.4pt
\renewcommand{\footrulewidth}{0.4pt}% Default \footrulewidth is 0pt
\pagestyle{fancy}
\lhead{Data Analysis with R: Exercises} % left header
\rhead{\exercisetopic} % right header
\lfoot{Sonja Hartnack, Terence Odoch \& Muriel Buri} % left footer
\rfoot{\thepage\ of \pageref{LastPage}} % right footer
\cfoot{} % get rid of the centered page number

% -----------------------------------------------------------------------------
% BEGINNING OF ACTUAL DOCUMENT
% -----------------------------------------------------------------------------

\begin{document}

\maketitle
\thispagestyle{fancy}

% \section*{Exercise 1}
% \begin{itemize}
% \item Open R Studio
% \item Open a new R-Script
% \item Load data set \texttt{chickwts}
% <<echo = FALSE, eval = FALSE>>=
% data(chickwts)
% head(chickwts)
% # ?chickwts
% @
% 
% \item Do summary statistic (numerically and graphically)
% <<echo = FALSE, eval = FALSE>>=
% summary(chickwts)
% tapply(chickwts$weight, chickwts$feed, mean)
% tapply(chickwts$weight, chickwts$feed, median)
% tapply(chickwts$weight, chickwts$feed, sd)
% table(chickwts$feed)
% barplot(table(chickwts$feed))
% boxplot(chickwts$weight ~ chickwts$feed)
% # boxplot(weight ~ feed, data = chickwts)
% hist(chickwts$weight)
% boxplot(weight ~ feed, data = chickwts, col = "lightgray",
%         varwidth = TRUE, notch = TRUE, main = "chickwt data",
%         ylab = "Weight at six weeks (gm)")
% @
% % Anova, lm, which groups differ, Bonferroni, Tukey-Anscombe
% % Histogram with density line
% % Normally distributed weights
% \end{itemize}
% 
% \section*{Exercise 2}
% \begin{itemize}
% \item Create a data frame with 3 columns.
% <<echo = FALSE, eval = FALSE>>=
% a <- c(1, 2, 3, 4)
% b <- c("d", "h", "h", "d")
% c <- factor(c("male", "female", "male", "female"),
%             levels = c("female", "male"))
% dat <- data.frame(a, b, c)
% dat
% @
% \end{itemize}
% 
% \section*{Exercise 3}
% \begin{itemize}
% \item Install package \texttt{MASS}.
% <<echo = FALSE, eval = FALSE>>=
% # install.packages("MASS")
% library("MASS")
% @
% 
% \item Load data set \texttt{bacteria}.
% <<echo = FALSE, eval = FALSE>>=
% data(bacteria)
% head(bacteria)
% # ?bacteria
% @
% 
% \item Do summary statistic (numerically and graphically).
% <<echo = FALSE, eval = FALSE>>=
% summary(bacteria)
% table(bacteria$week)
% barplot(table(bacteria$week))
% barplot(table(bacteria$trt))
% table(bacteria$trt, bacteria$ap)
% table(bacteria$trt, bacteria$y)
% 
% fisher.test(table(bacteria$trt, bacteria$y))
% 
% prop.table(table(bacteria$trt, bacteria$y))
% prop.table(table(bacteria$trt, bacteria$y), margin = 1)
% prop.table(table(bacteria$trt, bacteria$y), margin = 2)
% 
% plot(prop.table(table(bacteria$trt, bacteria$y)))
% mosaicplot(~trt + y, data = bacteria)
% barplot(prop.table(table(bacteria$y, bacteria$trt),margin=1), beside=TRUE)
% barplot(prop.table(table(bacteria$trt, bacteria$y),margin=1), beside=TRUE)
% barplot(prop.table(table(bacteria$y, bacteria$trt),margin=1), beside=FALSE)
% barplot(prop.table(table(bacteria$trt, bacteria$y),margin=1), beside=FALSE)
% ?barplot
% @
% 
% \item Select only observations collected during the second week.
% <<echo = FALSE, eval = FALSE>>=
% subset(bacteria, week == 2)
% ss <- subset(bacteria, week == 2)
% summary(ss)
% # Check if we only have observations of week 2.
% table(bacteria$week)
% table(ss$week)
% @
% \end{itemize}
% 
% \section*{Exercise 4}
% What is conceptionally the difference between these bracket types ([...], (...))?
% <<echo=TRUE, eval=FALSE, size="scriptsize", message=FALSE, warning=FALSE>>=
% chickwts[, 2]
% summary(aov(weight ~ feed, data = chickwts))
% @
% 
% <<echo=FALSE, eval=FALSE, size="scriptsize", message=FALSE, warning=FALSE>>=
% # SOLUTION: [...] the squared brackets we need to select rows and columns of a
% # data frame.
% # (...) the round brackets we need around function calls,
% # e. g.:
% subset(...) # to define a subset
% c(...) # to define a vector
% data.frame(...) # to define a data frame
% @
% 
% \section*{Exercise 5}
% \begin{itemize}
% \item How many levels has the factor variable \texttt{trt} from \texttt{bacteria}?
% <<echo = FALSE, eval = FALSE>>=
% str(bacteria)
% head(bacteria$trt)
% table(bacteria$trt)
% levels(bacteria$trt)
% nlevels(bacteria$trt)
% @
% \item Define a new variable \texttt{trt.new} in which you combine the levels
% \texttt{drug} and \texttt{drug+} into one single level and label it as \texttt{treated}.
% The new variable \texttt{trt.new} should in the end have two levels: \texttt{placebo} and \texttt{treated}.
% <<echo = FALSE, eval = FALSE>>=
% table(bacteria$trt)
% # OPTION 1:
% # Test how many levels are in the variable "trt"?
% levels(bacteria$trt)
% bacteria$trt.new <- bacteria$trt
% # Overwrite the levels "placebo", "drug", "drug+" with new
% # levels called "placebo", "drug", "drug" --> combine "drug" and "drug+"
% levels(bacteria$trt.new) <- c("placebo", "drug", "drug")
% # Do table for variable "trt" and "trt.new" to see if you combined correctly
% table(bacteria$trt)
% table(bacteria$trt.new)
% # Rename the levels from "placebo", "drug" to "placebo", "treated"
% levels(bacteria$trt.new) <- c("placebo", "treated")
% # Do another table to check if you did everything correctly:
% table(bacteria$trt.new)
% @
% \item Do summary statistics for \texttt{placebo} and \texttt{treated} group.
% <<echo = FALSE, eval = FALSE>>=
% summary(bacteria)
% table(bacteria$trt.new)
% barplot(table(bacteria$trt.new))
% table(bacteria$trt.new, bacteria$ap)
% table(bacteria$trt.new, bacteria$y)
% plot(table(bacteria$trt.new, bacteria$y))
% @
% \end{itemize}
% 
% \section*{Exercise 6}
% \begin{itemize}
% \item Load data set \texttt{ToothGrowth}.
% <<echo = FALSE, eval = FALSE>>=
% data(ToothGrowth)
% str(ToothGrowth)
% head(ToothGrowth)
% @
% \item Do summary statistic (numerically and graphically).
% <<echo = FALSE, eval = FALSE>>=
% table(ToothGrowth$supp)
% tapply(ToothGrowth$len, ToothGrowth$supp, mean)
% tapply(ToothGrowth$len, ToothGrowth$supp, median)
% tapply(ToothGrowth$len, ToothGrowth$supp, sd)
% 
% tapply(ToothGrowth$len, ToothGrowth$dose, mean)
% tapply(ToothGrowth$len, ToothGrowth$dose, median)
% tapply(ToothGrowth$len, ToothGrowth$dose, sd)
% 
% barplot(table(ToothGrowth$supp))
% hist(ToothGrowth$len)
% # install.packages("graphics")
% library("graphics")
% coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
%        xlab = "ToothGrowth data: length vs dose, given type of supplement")
% @
% \item Define additional column \texttt{dose.fac} by converting the numeric variable \texttt{dose} into a factor variable.
% <<echo = FALSE, eval = FALSE>>=
% table(ToothGrowth$dose)
% class(ToothGrowth$dose)
% ToothGrowth$dose.fac <- factor(ToothGrowth$dose, levels = c("0.5", "1", "2"))
% class(ToothGrowth$dose.fac)
% table(ToothGrowth$dose.fac)
% @
% 
% \item Are the tooth length measurements normally distributed within the treatment
% (\texttt{supp}: VC or OJ) and within in the different doses (\texttt{dose}: 0.5, 1, 2)?
% <<echo = FALSE, eval = FALSE>>=
% # supp: VC, OJ
% sub.OJ <- subset(ToothGrowth, supp == "OJ")
% sub.VC <- subset(ToothGrowth, supp == "VC")
% # graphically
% qqnorm(sub.OJ$len)
% qqline(sub.OJ$len)
% qqnorm(sub.VC$len)
% qqline(sub.VC$len)
% # with a statistical test
% shapiro.test(sub.OJ$len)
% shapiro.test(sub.VC$len)
% # dose: 0.5, 1, 2
% sub.0.5 <- subset(ToothGrowth, dose.fac == "0.5")
% sub.1 <- subset(ToothGrowth, dose.fac == "1")
% sub.2 <- subset(ToothGrowth, dose.fac == "2")
% # graphically
% qqnorm(sub.0.5$len)
% qqline(sub.0.5$len)
% qqnorm(sub.1$len)
% qqline(sub.1$len)
% qqnorm(sub.2$len)
% qqline(sub.2$len)
% # with a statistical test
% shapiro.test(sub.0.5$len)
% shapiro.test(sub.1$len)
% shapiro.test(sub.2$len)
% @
% \end{itemize}
% 
% \section*{Exercise 7}
% \begin{itemize}
% \item Import the data set \texttt{perulung\_ems.csv} (taken from Kirkwood and
% Sterne, 2nd edition) into R. \newline
% Data from a study of lung function among children living in a deprived suburb of
% Lima, Peru. \newline
% Variables:
% \begin{itemize}
% \item \texttt{fev1}:  in liter, ''Forced Expiratory Volume in 1 second'' measured
% by a spirometer. This is the maximum volume of air which the children could breath
% out in 1 second
% \item \texttt{age}: in years
% \item \texttt{height}: in cm
% \item \texttt{sex}: 0 = girl, 1 = boy
% \item \texttt{respsymp}: respiratory symptoms experienced by the child over the
% previous 12 months
% \end{itemize}
% \item What \textit{delimiter} do you need to choose?
% <<echo = FALSE, eval = FALSE>>=
% # OPTION 1:
% # install.packages("readr")
% library("readr")
% lung <- read_delim("~/Dropbox/201710_Makerere/03_Exercises/data/perulung_ems.csv",
%                    ";", escape_double = FALSE, trim_ws = TRUE)
% lung <- data.frame(lung)
% # OPTION 2:
% # Import .csv file with the help of the read.csv function
% # Be sure to add sep = ";" so that we separate the columns.
% lung <- read.csv("C:\\Users\\Exercises\\data\\perulung_ems.csv", sep = ";")
% head(lung)
% str(lung)
% @
% \item Do all variables have the correct data type (numeric, integer, factor)?
% If not, do correct and / or define them.
% <<echo = FALSE, eval = FALSE>>=
% head(lung)
% str(lung)
% lung$sex <- factor(lung$sex, levels = c("0", "1"))
% # levels(lung$sex) <- c("female", "male")
% # levels(lung$sex)[levels(lung$sex)=="0"] <- "female"
% # levels(lung$sex)[levels(lung$sex)=="1"] <- "male"
% # tapply(lung$fev1, lung$sex, mean)
% lung$respsymptoms <- factor(lung$respsymptoms, levels = c("0", "1"))
% @
% \end{itemize}
% 
% <<echo = FALSE, eval = FALSE>>=
% library(usdm)
% # check for multicollinearity by using variance inflation factors
% # cerate a dataframe just with the three continuous/numeric variables fevs, age and height
% try.vif <- lung[,c("fev1","height","age")];
% # perform scatterplots for these three variables
% pairs(try.vif)
% # get the three VIF, as a rule of thumb they should be < 3
% vif(try.vif)
% @
% 
% Check for heteroscedascity or homogeneity of variances
% <<echo = FALSE, eval = FALSE>>=
% ?bartlett.test
% data("chickwts")
% bartlett.test(weight ~ feed, data = chickwts)
% @
% 
% \section*{Exercise 8}
% Apply the summary statistics to the \texttt{perulung\_ems} and \texttt{ToothGrowth}
% data set.
% <<echo = FALSE, eval = FALSE>>=
% # Read in .csv data
% lung <- read.csv("C:\\Users\\Exercises\\data\\perulung_ems.csv", sep = ";")
% head(lung)
% str(lung)
% summary(lung)
% lung$sex <- factor(lung$sex, levels = c("0", "1"))
% levels(lung$sex) <- c("female", "male")
% lung$respsymptoms <- factor(lung$respsymptoms, levels = c("0", "1"))
% # Continuous and factor
% tapply(lung$height, lung$sex, mean)
% tapply(lung$height, lung$respsymptoms, mean)
% # Factor and factor
% table(lung$respsymptoms, lung$sex)
% prop.table(table(lung$respsymptoms, lung$sex))
% # Continuous and factor
% tapply(lung$age, lung$sex, mean)
% tapply(lung$age, lung$respsymptoms, mean)
% # Continuous and factor
% tapply(lung$fev1, lung$sex, mean)
% tapply(lung$fev1, lung$respsymptoms, mean)
% # Continuous and continuous
% pairs(lung)
% cor.test(lung$fev1, lung$age, method = "pearson")
% cor.test(lung$fev1, lung$height, method = "pearson")
% # ToothGrowth
% summary(ToothGrowth)
% table(ToothGrowth$supp)
% tapply(ToothGrowth$len, ToothGrowth$supp, mean)
% tapply(ToothGrowth$len, ToothGrowth$supp, median)
% tapply(ToothGrowth$len, ToothGrowth$supp, sd)
% table(ToothGrowth$dose)
% tapply(ToothGrowth$len, ToothGrowth$dose, mean)
% tapply(ToothGrowth$len, ToothGrowth$dose, median)
% tapply(ToothGrowth$len, ToothGrowth$dose, sd)
% @
% 
% \section*{Exercise 9A: Plausibility Checks}
% \begin{itemize}
% \item What can go wrong?
% \item Identify different strategies for spotting these potential errors.
% \begin{itemize}
% \item Logical errors
% \item Spelling mistakes
% \end{itemize}
% \item Import the data set \texttt{bacteria\_plausibility\_check.csv} to R.
% <<echo = FALSE, eval = FALSE>>=
% # OPTION 1:
% # install.packages("readr")
% library("readr")
% bac <- read_delim("~/Dropbox/201710_Makerere/03_Exercises/data/bacteria_plausibility_check.csv",
%                   ";", escape_double = FALSE, trim_ws = TRUE)
% bac <- data.frame(bac)
% # OPTION 2:
% # Import .csv file with the help of the read.csv function
% # Be sure to add sep = ";" so that we separate the columns.
% bac <- read.csv("~/Dropbox/201710_Makerere/03_Exercises/data/bacteria_plausibility_check.csv", sep = ",")
% head(bac)
% str(bac)
% summary(bac)
% @
% \item Detect the \textbf{six} errors in the imported data set
% \texttt{bacteria\_plausibility\_check.csv} in R.
% <<echo = FALSE, eval = FALSE>>=
% str(bac)
% table(bac$y) # We have wrong factor levels: 0, 1
% table(bac$ap)
% table(bac$hilo) # We have a spelling mistake: Hi.
% table(bac$week) # There's only ONE observation in week 20.
% table(bac$ID)
% table(bac$trt) # We have wrong factor levels: drug++, penicillin+
% summary(bac$child_weight) # child weight of 302.8 kg is impossible --> comma
% @
% \item Find possible solutions in R how to handle these challenges.
% <<echo = FALSE, eval = FALSE>>=
% bac$y[which(bac$y == 0)] <- "n"
% # bac$y[bac$y == 0] <- "n"
% bac$y[which(bac$y == 1)] <- "y"
% # Delete the unused levels with the function droplevels(...)
% bac$y <- droplevels(bac$y)
% bac$hilo[bac$hilo == "Hi"] <- "hi"
% bac$hilo[which(bac$hilo == "Hi")] <- "hi"
% levels(bac$hilo) <- c("hi", "hi", "lo")
% summary(bac)
% bac <- bac[-which(bac$week == 20), ] # dim(bac)
% bac$trt[bac$trt == "drug++"] <- "drug+"
% bac$trt[bac$trt == "penicillin+"] <- "drug+"
% table(bac$trt) # We have wrong factor levels: drug++, penicillin+
% bac$child_weight[bac$child_weight == 302.8] <- 30.28
% summary(bac)
% @
% \item Do all variables have the correct data type (numeric, integer, factor)?
% - If not, do correct / define them.
% <<echo = FALSE, eval = FALSE>>=
% bac$y <- factor(bac$y, levels = c("n", "y"))
% bac$hilo[bac$hilo == "Hi"] <- "hi"
% bac$ID <- factor(bac$ID)
% bac$trt <- factor(bac$trt)
% @
% \end{itemize}
% 
% \section*{Exercise 9B: Missing Values}
% \begin{itemize}
% \item Check out the difference between the different missing values
% <<echo = TRUE, eval = FALSE>>=
% y1 <- c(2, 4, 3, NA, 6, 1)
% y2 <- c("diseased", "healthy", NA, "NA")
% y3 <- c(1, "NA", 0, 1, NaN)
% 
% is.na(y1)
% which(is.na(y1))
% is.na(y2)
% which(is.na(y2))
% is.na(y3)
% which(is.na(y3))
% is.nan(y3)
% @
% 
% \item Create a vector with missing values and determine the mean and median
% <<echo = TRUE, eval = FALSE>>=
% myvector <- c(1:3,NA,NA,1:3)
% mean(myvector)
% mean(myvector,na.rm=TRUE) # calculates c(1, 2, 3, 1, 2, 3)
% median(myvector,na.rm=TRUE)
% @
% 
% \item If \texttt{x = c (22,3,7,NA,NA,67)} what will be the output for the R
% statement \texttt{length(x)}?
% <<echo = TRUE, eval = FALSE>>=
% x <- c (22,3,7,NA,NA,67)
% length(x)
% @
% 
% \item If \texttt{x = c(NA,3,14,NA,33,17,NA,41)} which line of R code removes
% all occurrences of NA in x.
% <<echo = TRUE, eval = FALSE>>=
% x <- c(NA,3,14,NA,33,17,NA,41)
% x[!is.na(x)]
% x[is.na(x)]
% x[which(is.na(x))] <- 0
% @
% 
% \item If \texttt{y = c(1,3,12,NA,33,7,NA,21)} what R statement will replace
% all occurrences of NA with 11?
% <<echo = TRUE, eval = FALSE>>=
% y <- c(1,3,12,NA,33,7,NA,21)
% y[y=="NA"] <- 11
% y[is.na(y)] <- 11
% y[y==11] <- NA
% @
% 
% \item If \texttt{x = c(34,33,65,37,89,NA,43,NA,11,NA,23,NA)} then what will
% count the number of occurrences of NA in \texttt{x}?
% <<echo = TRUE, eval = FALSE>>=
% x <- c(34,33,65,37,89,NA,43,NA,11,NA,23,NA)
% sum(x=="NA")
% sum(x == "NA", is.na(x))
% sum(is.na(x))
% @
% 
% \item Create a vector and find the number of missing values and their position
% <<echo = TRUE, eval = FALSE>>=
% x1 <- c(rnorm(10,5,2),NA,5:12,NA,6,7.5,NA)
% is.na(x1)
% summary(x1)
% sum(is.na(x1))
% which(is.na(x1))
% @
% 
% \item Now, create the vector x2 and assess the difference to x1
% <<echo = TRUE, eval = FALSE>>=
% x2 <- c(rnorm(10,5,2),NA,5:12,NA,6,7.5,NA,log(-2))
% x2
% @
% 
% \item What is the meaning of "NA" versus "NaN"?
% 
% \item Replace the missing values in x1 with a 0, and check that no NAs are present
% try two different commands to coerce the NAs into 0
% <<echo = TRUE, eval = FALSE>>=
% x1[is.na(x1)] <- 0
% is.na(x1)
% # or
% ifelse(is.na(x1),0,x1)
% @
% \end{itemize}
% 
% \section*{Exercise 10}
% \begin{itemize}
% \item Import the data set \texttt{water\_errors.csv} to R:
% A data frame with $61$ observations on the following $6$
% variables.
% \begin{itemize}
% \item \textbf{location}: a factor with levels \texttt{North} and \texttt{South} indicating
% whether the town is as north as Derby.
% \item \textbf{town}: the name of the town.
% \item \textbf{mortality}: averaged annual mortality per 100.000 male inhabitants.
% \item \textbf{hardness}: calcium concentration (in parts per million).
% \item \textbf{smoker}: If there are any smokers living in town.
% \item \textbf{num.of.cig}: In case, smokers live in town, what number of
% cigarettes do they smoke per day.
% \end{itemize}
% <<echo = FALSE, eval = FALSE>>=
% # H2O_err <- read_csv("C:\\Users\\admin\\Dropbox\\201710_Makerere\\03_Exercises\\data\\water_errors.csv")
% # str(H2O_err)
% # H2O_err <- data.frame(H2O_err)
% # str(H2O_err)
% # BEST SOLUTION how to read it in:
% # Try to use the "read.csv(...)" function to read data in!
% # use the separator sep=";" or sep="," - which ever works better.
% H2O_err <- read.csv("C:\\Users\\admin\\Dropbox\\201710_Makerere\\03_Exercises\\data\\water_errors.csv", sep=",")
% str(H2O_err)
% 
% # H2O_err <- read_csv("~/Dropbox/201710_Makerere/03_Exercises/data/water_errors.csv")
% H2O_err <- read.csv("~/Dropbox/201710_Makerere/03_Exercises/data/water_errors.csv", sep=",")
% 
% 
% C:\Users\admin\Dropbox\201710_Makerere\03_Exercises\data
% H2O_err <- data.frame(H2O_err)
% str(H2O_err)
% head(H2O_err)
% @
% 
% 
% 
% 
% 
% \item Detect the errors in the imported data set \texttt{water\_errors.csv} in R.
% <<echo = FALSE, eval = FALSE>>=
% str(H2O_err)
% table(H2O_err$location) # Only one N and only one West observation.
% table(H2O_err$town) # LIVERPOOL is in capital letter.
% summary(H2O_err$mortality)
% summary(H2O_err$hardness) # hardness of -2 does not make sense, two NA's
% table(H2O_err$num.of.cig) # only one "zero" observation (wrong coding / level)
% table(H2O_err$smoker, H2O_err$num.of.cig) # non-smokers who smoke more than 20?
% @
% \item Find possible solutions in R how to handle these challenges.
% <<echo = FALSE, eval = FALSE>>=
% str(H2O_err)
% which(H2O_err$location == "N") # 6th row
% which(H2O_err$location == "West") # 9th row
% H2O_err$location[H2O_err$location == "N"] <- "North"
% H2O_err$location[H2O_err$location == "West"] <- NA # Option 1: Set to NA.
% dim(H2O_err)
% H2O_err <- H2O_err[-which(H2O_err$location == "West"), ] # Option 2: Remove from data.
% dim(H2O_err)
% # H2O_err$town[H2O_err$town == "LIVERPOOL"] <- "Liverpool"
% # H2O_err <- H2O_err$town[-which(H2O_err$town == "LIVERPOOL"), ]
% which(is.na(H2O_err$hardness))
% H2O_err$hardness[which(is.na(H2O_err$hardness))] <- NA
% H2O_err$hardness[which(H2O_err$hardness == -2)] <- NA
% # H2O_err$hardness[which(H2O_err$hardness == -2)] <- 2
% summary(H2O_err$hardness)
% # Check levels of varibale num.of.cig
% levels(H2O_err$num.of.cig)
% table(H2O_err$num.of.cig)
% # Change the zero level to none
% H2O_err$num.of.cig[H2O_err$num.of.cig == "zero"] <- "none"
% # Drop unused levels
% H2O_err$num.of.cig <- droplevels(H2O_err$num.of.cig)
% # levels(droplevels(H2O_err$num.of.cig))
% table(H2O_err$num.of.cig)
% 
% which.F.morethan20 <- which(H2O_err$smoker == FALSE & H2O_err$num.of.cig == "more than 20")
% H2O_err[which.F.morethan20, ]
% # OPTION 1:
% H2O_err$num.of.cig[which.F.morethan20] <- NA
% # OPTION 2:
% H2O_err$smoker[which.F.morethan20] <- TRUE
% # check again, that we corrected it right
% H2O_err[which.F.morethan20, ]
% table(H2O_err$smoker, H2O_err$num.of.cig) # check again!
% 
% which(H2O_err$smoker == FALSE & H2O_err$num.of.cig == "more than 20")
% which.T.none <- which(H2O_err$smoker == TRUE & H2O_err$num.of.cig == "none")
% H2O_err[which.T.none, ]
% H2O_err$smoker[which.T.none] <- FALSE
% table(H2O_err$smoker, H2O_err$num.of.cig)
% @
% \item Do all variables have the correct data type (numeric, integer, factor)?
% - If not, do correct / define them.
% <<echo = FALSE, eval = FALSE>>=
% str(H2O_err)
% levels(H2O_err$location)
% H2O_err$location <- factor(H2O_err$location, levels = c("North", "South", NA),
%                            exclude = NULL)
% levels(H2O_err$smoker)
% H2O_err$smoker <- factor(H2O_err$smoker, levels = c("FALSE", "TRUE"))
% table(H2O_err$num.of.cig)
% H2O_err$num.of.cig <- factor(H2O_err$num.of.cig,
%                              levels = c("none", "less than 5", "5 to 20", "more than 20"),
%                              ordered = TRUE)
% table(H2O_err$num.of.cig)
% levels(H2O_err$num.of.cig)
% levels(H2O_err$num.of.cig) <- c("none", "1 to less than 5", "5 to 20", "more than 20")
% table(H2O_err$num.of.cig)
% levels(H2O_err$num.of.cig)
% @
% \end{itemize}
% 
% \section*{Exercise 11}
% \begin{itemize}
% \item Apply the two-sided two sample t-test to suitable variables of the data set \texttt{ToothGrowth}.
% <<echo = FALSE, eval = FALSE>>=
% ?t.test
% t.test(ToothGrowth$len ~ ToothGrowth$supp)
% t.test(len ~ supp, data = ToothGrowth) 
% # p-value = 0.06039 (borderline) significant, close to 0.05
% # p-value says the difference is not (borderline) significant
% # however, the boxplot do somehow look different
% boxplot(ToothGrowth$len ~ ToothGrowth$supp)
% # change the default setting of var.equal
% t.test(ToothGrowth$len ~ ToothGrowth$supp, var.equal = TRUE)
% t.test(ToothGrowth$len ~ ToothGrowth$supp, var.equal = FALSE) # DEFAULT!
% 
% # Define subset
% sub.OJ <- subset(ToothGrowth, supp == "OJ")
% sub.VC <- subset(ToothGrowth, supp == "VC")
% # Drop (unused) levels for each subset
% sub.VC$supp <- droplevels(sub.VC$supp)
% levels(sub.VC$supp) # check that levels are dropped
% sub.OJ$supp <- droplevels(sub.OJ$supp)
% levels(sub.OJ$supp) # check that levels are dropped
% # Additional option for comparing lengths between the two groups:
% # Compare the two vectors of lengths
% t.test(sub.VC$len, sub.OJ$len)
% 
% @
% \item Interpret the results.
% <<echo = FALSE, eval = FALSE>>=
% # t = 1.9153
% # df = 55.309
% # p-value = 0.06063
% # 95 percent confidence interval: -0.1710156  7.5710156
% # sample mean in group OJ: 20.66333         
% # sample mean in group VC: 16.96333
% # Also with the lm(...) function  for "linear model" you get the same sample means:
% lm.mod0 <- lm(ToothGrowth$len ~ ToothGrowth$supp - 1)
% coef(lm.mod)
% @
% \item Apply the two-sided t-test to the \texttt{perulang\_ems} data set
% <<echo = FALSE, eval = FALSE>>=
% # two-sided t-test of fev1 vs respsymptoms
% t.test(lung$fev1 ~ lung$respsymptoms)
% t.test(fev1 ~ respsymptoms, data = lung)
% # Define linear model
% mod.fev.resp.0 <- lm(lung$fev1 ~ lung$respsymptoms)
% summary(mod.fev.resp.0)
% mod.fev.resp.1 <- lm(lung$fev1 ~ lung$respsymptoms - 1)
% summary(mod.fev.resp.1)
% # Coefficients of linear model
% coef(mod.fev.resp.0)
% coef(mod.fev.resp.1)
% # Anova
% anova(mod.fev.resp.0)
% anova(mod.fev.resp.1)
% # two-sided t-test of fev1 vs sex
% t.test(lung$fev1 ~ lung$sex)
% t.test(fev1 ~ sex, data = lung)
% # Define linear model
% mod.fev.sex.0 <- lm(lung$fev1 ~ lung$sex)
% mod.fev.sex.1 <- lm(lung$fev1 ~ lung$sex - 1)
% # Coefficients of linear model
% coef(mod.fev.sex.0)
% coef(mod.fev.sex.1)
% # Anova
% anova(mod.fev.sex.0)
% anova(mod.fev.sex.1)
% @
% \end{itemize}
% 
% 
% \section*{Exercise 12}
% \begin{itemize}
% \item Apply the Chi-square Test and the fisher exact test to the whole
% \texttt{bacteria} data set.
% <<echo = FALSE, eval = FALSE>>=
% library("MASS")
% data(bacteria)
% summary(bacteria)
% subbac <- subset(bacteria, week == 2)
% bacteria$trt.new <- bacteria$trt
% levels(bacteria$trt.new) <- c("placebo", "drug", "drug")
% bacteria$trt.new <- droplevels(bacteria$trt.new)
% # Ordering of the variables does not matter
% chisq.test(table(bacteria$trt, bacteria$y))
% chisq.test(table(bacteria$y, bacteria$trt))
% chisq.test(bacteria$trt, bacteria$y)
% my.table <- table(bacteria$trt, bacteria$y)
% chisq.test(my.table) 
% table(subbac$trt, subbac$y)
% chisq.test(table(subbac$trt, subbac$y))
% fisher.test(table(subbac$trt, subbac$y))
% fisher.test(table(subbac$trt.new, subbac$y))
% # Chi-squared test with trt and y
% chisq.test(table(bacteria$trt, bacteria$y))
% # Fisher test with trt and y
% fisher.test(table(bacteria$trt, bacteria$y))
% @
% \item Apply the Chi-square Test and the fisher exact test to the subset of
% \texttt{bacteria} containing only the observations taken in week 2.
% Are there any issues?
% <<echo = FALSE, eval = FALSE>>=
% subbac <- subset(bacteria, week == 2)
% # Chi-squared test with trt and y
% chisq.test(table(subbac$trt, subbac$y))
% # --> NOT RELIABLE RESULTS: at least 5 observations per group.
% # Fisher test with trt and y
% fisher.test(table(subbac$trt, subbac$y))
% @
% \item Repeat this exercise by using the (previously defined) combined
% \texttt{trt.new} variable with the two levels \texttt{treated} and \texttt{drug}.
% <<echo = FALSE, eval = FALSE>>=
% # WHOLE DATA SET
% # Chi-squared test with trt.new and y
% chisq.test(table(bacteria$trt.new, bacteria$y))
% # Fisher test with trt.new and y
% fisher.test(table(bacteria$trt.new, bacteria$y))
% # SUB DATA SET only observations from week 2
% # Chi-squared test with trt.new and y
% chisq.test(table(subbac$trt.new, subbac$y))
% # --> NOT RELIABLE RESULTS: at least 5 observations per group.
% # Fisher test with trt.new and y
% fisher.test(table(subbac$trt.new, subbac$y))
% @
% \item Could you also obtain the odds ratios?
% <<echo = FALSE, eval = FALSE>>=
% fisher.test(table(subbac$trt.new, subbac$y))
% fisher.test(bacteria$y, bacteria$ap)
% my.logreg <- glm(y ~ ap, data = bacteria, family = "binomial")
% summary(my.logreg)
% exp(0.8473 )
% coef(my.logreg)
% exp(coef(my.logreg))
% @
% \item Try also a logistic regression in R. Ask Google for help!
% <<echo = FALSE, eval = FALSE>>=
% model.logreg <- glm(bacteria$y ~ bacteria$trt.new, family = "binomial")
% model.logreg <- glm(y ~ trt.new, data = bacteria, family = "binomial")
% summary(model.logreg)
% anova(model.logreg)
% coef(model.logreg)
% exp(coef(model.logreg))
% @
% \end{itemize}
% 
% \section*{Exercise 13A: Outside plot frame}
% \begin{itemize}
% \item Type \texttt{demo(graphics)} in your console and press enter.
% This command shows you a nice demonstration of possible R graphics.
% <<echo = TRUE, eval = FALSE>>=
% # After the demonstration us the following commands:
% dev.off()
% par(mfrow=c(1,1))
% @
% \item Change the x-axis and y-axis labelling of a boxplot plotting the
% \texttt{len} variable of the \texttt{ToothGrowth} data set.
% <<echo = FALSE, eval = FALSE>>=
% boxplot(ToothGrowth$len, xlab = "Length of Teeth",
%         ylab = "Length in mm")
% @
% \item How do you set a main title for your above plot?
% <<echo = FALSE, eval = FALSE>>=
% # OPTION 1:
% boxplot(ToothGrowth$len, xlab = "Length of Teeth",
%         ylab = "Length in mm",
%         main = "Boxplot of Tooth Length")
% # OPTION 2:
% boxplot(ToothGrowth$len, xlab = "Length of Teeth",
%         ylab = "Length in mm")
% title("Boxplot of Tooth Length")
% @
% \item What does the following command do?
% <<echo = TRUE, eval = FALSE>>=
% par(mfrow=c(2,2))
% @
% <<echo = FALSE, eval = FALSE>>=
% # With the par(...) function, you can include the option
% # mfrow=c(nrows, ncols) to create a matrix of nrows x ncols plots
% # that are filled in by row.
% par(mfrow=c(2,2)) # 2 rows, 2 columns
% par(mfrow=c(4,3)) # 4 rows, 3 columns
% # DO NOT FORGET TO CHANGE IT BACK TO:
% par(mfrow=c(1, 1)) # the default
% @
% 
% \item We have six different feed types in \texttt{chickwts}. Try to plot two
% separate boxplots for \texttt{casein} and \texttt{horsebean} and set the same
% minimum and maximum for the y-axis. Use the function \texttt{subset} for doing so.
% <<echo = TRUE, eval = FALSE>>=
% sub.casein <- subset(chickwts, feed == "casein")
% sub.casein <- droplevels(sub.casein)
% sub.horsebean <- subset(chickwts, feed == "horsebean")
% sub.horsebean <- droplevels(sub.horsebean)
% @
% <<echo = FALSE, eval = FALSE>>=
% sub.casein <- subset(chickwts, feed == "casein")
% sub.casein <- droplevels(sub.casein)
% sub.horsebean <- subset(chickwts, feed == "horsebean")
% sub.horsebean <- droplevels(sub.horsebean)
% summary(sub.casein$weight)
% summary(sub.horsebean$weight)
% boxplot(sub.casein$weight ~ sub.casein$feed, ylim = c(100, 410))
% boxplot(sub.horsebean$weight ~ sub.horsebean$feed, ylim = c(100, 410))
% @
% \item How do you enlarge the font size of the axis as well as the axis labels
% of the following plot with the \texttt{perulung} data set?
% <<echo = TRUE, eval = FALSE>>=
% plot(lung$fev1, lung$height)
% @
% <<echo = FALSE, eval = FALSE>>=
% plot(lung$fev1, lung$height, cex.axis = 1.5, cex.lab = 1.5)
% plot(lung$fev1, lung$height, cex.axis = 1.5, cex.lab = 1.5, las = 1)
% @
% \item Label the x-axis of the following plot with ''Vitamin C in $\mu$g''. Use the
% greek letter for $\mu$.
% <<echo = TRUE, eval = FALSE>>=
% plot(ToothGrowth$dose, ToothGrowth$len)
% @
% <<echo = FALSE, eval = FALSE>>=
% plot(ToothGrowth$dose, ToothGrowth$len,
%      xlab = expression(paste("Vitamin C in ", mu, "g")))
% @
% \item Read \url{http://www.statmethods.net/advgraphs/parameters.html}.
% \end{itemize}

% \section*{Exercise 13B: Inside the square of the plot}
% \begin{itemize}
% \item Type \texttt{demo(graphics)} in your console and press enter.
% \item Add a legend to the following barplot. Are there several different solutions
% for this?
% <<echo = TRUE, eval = FALSE>>=
% barplot(prop.table(table(bacteria$y, bacteria$trt),margin=1),
%         beside=FALSE, ylim = c(0,0.8))
% @
% <<echo = FALSE, eval = FALSE>>=
% barplot(prop.table(table(bacteria$y, bacteria$trt),margin=1), beside=FALSE,
%         ylim = c(0,0.8), legend.text = levels(bacteria$y))
% # Helen's solution (THANK YOU!):
% barplot(prop.table(table(bacteria$y, bacteria$trt), margin=1),
%         beside=FALSE, ylim = c(0,0.8), col = topo.colors(2),
%         ylab = "y", xlab = "treatments",
%         main = "bacteria")
% legend("topright", legend = c("yes", "no"), fill = topo.colors(2))
% @
% \item Add a density line to this histogram.
% <<echo = TRUE, eval = FALSE>>=
% hist(ToothGrowth$len, prob = TRUE, col = "grey", ylim = c(0, 0.05))
% @
% <<echo = FALSE, eval = FALSE>>=
% hist(ToothGrowth$len, prob = TRUE, col = "grey", ylim = c(0, 0.05))
% # add a density estimate with defaults
% lines(density(ToothGrowth$len), col="blue", lwd = 4)
% # add a density estimate with adjustments
% lines(density(ToothGrowth$len, adjust=2), lty="dotted", col="darkgreen",
%       lwd = 4)
% @
% \item Add a \textbf{dotted red} linear regression line to the following plot.
% <<echo = TRUE, eval = FALSE>>=
% plot(lung$height, lung$fev1)
% @
% <<echo = FALSE, eval = FALSE>>=
% plot(lung$height, lung$fev1)
% abline(lm(lung$fev1 ~ lung$height), col = "red",
%        lwd = 3, lty = 2)
% # See
% # https://stackoverflow.com/questions/24173468/r-print-equation-of-linear-regression-on-the-plot-itself
% # to learn how to print equation of linear regression on the plot
% ## rounded coefficients for better output
% lm.mod <- lm(lung$fev1 ~ lung$height)
% cf <- round(coef(lm.mod), 2)
% ## sign check to avoid having plus followed by minus for negative coefficients
% eq <- paste0("fev1 = ", cf[1],
%              ifelse(sign(cf[2])==1, " + ", " - "), abs(cf[2]), " height ")
% ## printing of the equation
% mtext(eq, 3, line=-2)
% @
% \item Color the points in the following plot according to the \texttt{sex} variable.
% <<echo = TRUE, eval = FALSE>>=
% plot(lung$height, lung$fev1)
% @
% <<echo = FALSE, eval = FALSE>>=
% plot(lung$height, lung$fev1, col = as.numeric(lung$sex))
% @
% \item Add two linear regression lines separately for \texttt{female} and \texttt{male}to the following plot.
% <<echo = TRUE, eval = FALSE>>=
% plot(lung$height, lung$fev1)
% @
% <<echo = FALSE, eval = FALSE>>=
% plot(lung$height, lung$fev1, col = as.numeric(lung$respsymptoms))
% abline(lm(lung$fev1 ~ lung$height,
%           data = subset(lung, sex == "female")),
%        col  = "black")
% abline(lm(lung$fev1 ~ lung$height,
%           data = subset(lung, sex == "male")),
%        col  = "red")
% # library("graphics")
% # coplot(fev1 ~ height | sex, data = lung, panel = panel.smooth)
% # coplot(fev1 ~ height | respsymptoms, data = lung, panel = panel.smooth)
% @
% \item Color the points in the following plot according to the \texttt{supp} variable.
% Use different point characters (\texttt{pch}) based on the \texttt{supp} variable.
% <<echo = TRUE, eval = FALSE>>=
% plot(ToothGrowth$len, ToothGrowth$dose)
% @
% <<echo = FALSE, eval = FALSE>>=
% plot(ToothGrowth$len, ToothGrowth$dose,
%      pch = levels(ToothGrowth$supp),
%      col = as.numeric(ToothGrowth$supp))
% @
% \item Read \url{http://www.statmethods.net/advgraphs/parameters.html}.
% \end{itemize}

\section*{Exercise 14}
\begin{itemize}
\item Load the below data set and for further information check the command
\texttt{?water}.
<<echo = TRUE, eval = FALSE>>=
# install.packages("HSAUR3")
library("HSAUR3")
data("water")
str(water)
head(water)
summary(water)
@
\item Try to plot the variables \texttt{mortality} against \texttt{hardness} from
the \texttt{water} data set.
<<echo = FALSE, eval = FALSE>>=
par(mfrow=c(1,1))
plot(x = water$hardness, y = water$mortality)
plot(mortality ~ hardness, data = water)
@
\item Add a main title to the above plot (\texttt{mortality} against
\texttt{hardness}).
<<echo = FALSE, eval = FALSE>>=
plot(x = water$hardness, y = water$mortality, 
     main = "Calcium concentration against mortality")
plot(mortality ~ hardness, data = water,
     main = "Calcium concentration against mortality")
@
\item Change the ...
\begin{enumerate}
\item font size of the axis annotation
\item font size of the x- and y-axis labels
\item the point sizes within the plot
\end{enumerate}
... of the above plot (\texttt{mortality} against \texttt{hardness}).
<<echo = FALSE, eval = FALSE>>=
# cex: number indicating the amount by which plotting text and symbols
# should be scaled
# cex.axis:	magnification of axis annotation relative to cex
plot(x = water$hardness, y = water$mortality,
     cex.axis = 1.5, # (1) enlarge number of the axis
     cex.lab = 1.5, # (2) enlarge font size of axis labels
     cex = 1.5, # (3) enlarge point size within plot
     main = "Calcium concentration vs. mortality")
plot(mortality ~ hardness, data = water,
     cex.axis = 1.5, # enlarge number of the axis
     cex = 1.5, # enlarge point size within plot
     cex.lab = 1.5, # enlarge font size of axis labels
     main = "Calcium concentration vs. mortality")
@
\item Looking at the above plot: Do you think the two variables \texttt{hardness}
and \texttt{mortality} correlate? What function do you use to find out the correlation
coefficient? Do they have a positive or a negative correlation coefficient? How
do you interpret the correlation coefficient in your own words?
<<echo = FALSE, eval = FALSE>>=
cor(x = water$hardness, y = water$mortality) # -0.6548486
cor.test(x = water$hardness, y = water$mortality)
# negative correlation of -0.65 with confidence interval of [-0.78, -0.48]:
# the higher the calcium concentration (hardness),
# the smaller the averaged annual mortality per 100.000 male
# inhabitants (mortality)
@
\item In the \texttt{water} data set, can you graphically find out if there is a
difference between the the two variables \texttt{hardness} and \texttt{mortality}
conditional on the \texttt{location} (\texttt{North}, \texttt{South}).
<<echo = FALSE, eval = FALSE>>=
plot(x = water$hardness, y = water$mortality,
     col = as.numeric(water$location),
     pch = 16, cex.axis = 1.5,
     cex = 1.5, cex.lab = 1.5)
library("graphics")
coplot(mortality ~ hardness | location, data = water, panel = panel.smooth)
@
\item Add a legend to the above plot so that you can easily differentiate the
locations (\texttt{North} or \texttt{South}) of the observations.
<<echo = FALSE, eval = FALSE>>=
plot(x = water$hardness, y = water$mortality,
     col = as.numeric(water$location),
     pch = 16, cex.axis = 1.5,
     cex = 1.5, cex.lab = 1.5)
legend("topright", legend = levels(water$location),
       col = c("black", "red"), pch = 16, cex = 1.5)
@
\item Do a barplot of the variable \texttt{location} from the \texttt{water} data
set.
<<echo = FALSE, eval = FALSE>>=
barplot(table(water$location))
@
\item ADDITIONAL: Try if any of these following plotting functions can be
applied to the data sets \texttt{perulung} or \texttt{ToothGrowth}.
<<echo = TRUE, eval = FALSE>>=
install.packages("graphics")
library("graphics")
?coplot
#
# install.packages("lattice")
library("lattice")
?xyplot
#
?interaction.plot
@
<<echo = FALSE, eval = FALSE>>=
# PERULUNG DATA SET
coplot(fev1 ~ height | sex, data = lung, panel = panel.smooth)
coplot(fev1 ~ height | respsymptoms, data = lung, panel = panel.smooth)

xyplot(fev1 ~ height | sex, data = lung)
xyplot(fev1 ~ height | respsymptoms, data = lung)

# ToothGrowth DATA SET
interaction.plot(ToothGrowth$dose,
                 ToothGrowth$supp,
                 ToothGrowth$len,
                 fixed = TRUE)
@
\end{itemize}

\section*{Exercise 15}
\begin{itemize}
\item Download the .R file \texttt{ANOVA\_with\_chickwts.R} from the switch drive
and have another look on how we applied the anova to the \texttt{chickwts}
data set.
\item Load the \texttt{ToothGrowth} data set into R and encode the numeric variable
\texttt{dose} as a factor variable. Define the new factor variable as
\texttt{dose.fac} with the three levels \texttt{low}, \texttt{med} and
\texttt{high} and add it to the data frame of \texttt{ToothGrowth}.
<<echo = FALSE, eval = FALSE>>=
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
ToothGrowth$dose.fac <- factor(ToothGrowth$dose, levels = c(0.5, 1.0, 2.0),
                               labels = c("low", "med", "high"))
table(ToothGrowth$dose.fac)
@
\item Visualize the variable \texttt{len} per \texttt{dose} level in a boxplot.
<<echo = FALSE, eval = FALSE>>=
boxplot(ToothGrowth$len ~ ToothGrowth$dose.fac)
@
\item With the help of the R-commands written in the
\texttt{ANOVA\_with\_chickwts.R}  file, apply a analysis of variance (ANOVA) to
the data set \texttt{ToothGrowth}
<<echo = FALSE, eval = FALSE>>=
# aov.mod <- aov(ToothGrowth$len ~ ToothGrowth$dose.fac)
aov.mod <- aov(len ~ dose.fac, data = ToothGrowth)
# What objects can we extract from a anova model?
objects(aov.mod)
#
summary(aov.mod)

# What are residuals?
ToothGrowth$residuals <- residuals(aov.mod)
tapply(ToothGrowth$len, ToothGrowth$dose.fac, mean)
ToothGrowth[c(1:3),]
# Save residuals to an objects and check mean of residuals
aov.mod.resid <- residuals(aov.mod)
mean(aov.mod.resid)
round(mean(aov.mod.resid), 3)

par(mfrow=c(1,1))
qqnorm(aov.mod.resid)
qqline(aov.mod.resid, col = "red", lwd = 3, lty = 2)
# Shapiro-Wilk test (dependent on sample size --> limited use)
shapiro.test(aov.mod.resid)
# a <- rnorm(100, 20, 3)
# qqnorm(a)
# qqplot(a)
# shapiro.test(a)

# Bartlett Test
bartlett.test(ToothGrowth$len ~ ToothGrowth$dose.fac)

# Levene's Test
# install.packages("Rcmdr")
# library("Rcmdr")
# levene.test(ToothGrowth$len ~ ToothGrowth$dose.fac)

# Plot fitted against residual values
objects(aov.mod)
plot(fitted.values(aov.mod), residuals(aov.mod))

# Plot fitted against residual values
par(mfrow=c(1,2), pty="s", mar = c(1, 4, 1, 2))
plot(fitted.values(aov.mod), residuals(aov.mod))
abline(h = 0, col = "red", lwd = 3, lty = 2)
plot(aov.mod, which=1)

# Plot fitted against residual values
# Cut-off at 3 (y-axis)

# observations above 3 are regarded as having high
# influence to the analysis - have a closer look at them:
# outliers? delete them from the data set?
# why are these observations so influencial?
# everything below 3 is okay for the model
par(mfrow=c(1,1), pty="s", mar = c(5, 4, 4, 2))
plot(aov.mod, which=4)
# ToothGrowth[c(22, 23, 32),]

par(mfrow=c(1,3), pty="s")
plot(fitted.values(aov.mod), residuals(aov.mod))
abline(h = 0, col = "red", lwd = 3, lty = 2)
# Plot residuals against variables from the model
plot(ToothGrowth$len, residuals(aov.mod), ylab = "residuals")
plot(ToothGrowth$dose.fac, residuals(aov.mod),
     xlab = "ToothGrowth$dose.fac", ylab = "residuals")

par(mfrow=c(2, 2))
plot(aov.mod)

# # HOW TO RELEVEL FACTORS?
# # How to change the reference category of a factor variable?
# # Use the relevel(...) function
# # Make "sunflower" as reference category
# chickwts$feed <- relevel(chickwts$feed, "sunflower")
# levels(chickwts$feed)
# # Make "linseed" as reference category
# chickwts$feed <- relevel(chickwts$feed, "linseed")
# levels(chickwts$feed)
# chickwts$feed <- relevel(chickwts$feed, "casein")
# levels(chickwts$feed)

aov.mod <- aov(len ~ dose.fac, data = ToothGrowth)

# aov.mod1 <- aov(len ~ dose.fac, data = ToothGrowth)
# aov.mod2 <- aov(ToothGrowth$len ~ ToothGrowth$dose.fac)
# summary(aov.mod1)
# summary(aov.mod2)

# DO NOT USE THIS COMMAND, OTHERWISE THE LINEAR FUNCTION WITHIN
# DUNNETT AND TUKEY DOES NOT WORK!
# --> specify the data at the end of the aov model
# aov.mod <- aov(ToothGrowth$len ~ ToothGrowth$dose.fac)
summary(aov.mod)
pairwise.t.test(ToothGrowth$len, ToothGrowth$dose.fac, p.adj = "none")
pairwise.t.test(ToothGrowth$len, ToothGrowth$dose.fac, p.adj = "bonferroni")

# install the package first (one time)
# install.packages("multcomp") 
# load the library (every single time you use it!)
library("multcomp")
# compares always to baseline levels (here: casein) --> saves degrees of freedom
# make sure you saved the aov.mod as:
# aov.mod <- aov(len ~ dose.fac, data = ToothGrowth)
dunnett <- glht(aov.mod, linfct = mcp(dose.fac = "Dunnett"))
summary(dunnett)

library("multcomp")
# compares all factor levels
tukey <- glht(aov.mod, linfct = mcp(dose.fac = "Tukey"))
summary(tukey)
# summary(tukey)          # standard display
tukey.cld <- cld(tukey)   # letter-based display
# the cld(...) function sets up a compact letter display of all pair-wise comparisons
?par
par(mfrow=c(1,1), mar=c(5,4,8,2))
plot(tukey.cld)
@
\end{itemize}

\section*{Exercise 16}
\begin{itemize}
\item Download the .R file \texttt{LM\_with\_water.R} from the switch drive
and have another look on how we applied the linear model to the \texttt{water}
data set.
\item Reuse these commands to fit a simple as well as multiple linear regression
model to the data set of \texttt{perulung\_ems}. Use \texttt{fev1} as your
response variable $y$.
<<echo = FALSE, eval = FALSE>>=
lung <- read.csv("~/Dropbox/data/perulung_ems.csv", sep = ";")
head(lung)
str(lung)
lung$sex <- factor(lung$sex, levels = c("0", "1"))
levels(lung$sex) <- c("female", "male")
lung$respsymptoms <- factor(lung$respsymptoms, levels = c("0", "1"))

# MODEL 1
# mod.age <- lm(fev1 ~ age, data = lung)
mod.age <- lm(lung$fev1 ~ lung$age)
summary(mod.age)
coef(mod.age)
# Check model assumptions graphically
par(mfrow=c(2,2))
plot(mod.age)

# MODEL 2
# mod.height <- lm(fev1 ~ height, data = lung)
mod.height <- lm(lung$fev1 ~ lung$height)
summary(mod.height)
coef(mod.height)
# Check model assumptions graphically
par(mfrow=c(2,2))
plot(mod.height)

# MODEL 3
mod.age.height <- lm(fev1 ~ age + height, data = lung)
summary(mod.age.height)
coef(mod.age.height)
# Check model assumptions graphically
par(mfrow=c(2,2))
plot(mod.age.height)

# MODEL 4
mod.age.height.sex <- lm(fev1 ~ age + height + sex, data = lung)
summary(mod.age.height.sex)
coef(mod.age.height.sex)
# Check model assumptions graphically
par(mfrow=c(2,2))
plot(mod.age.height.sex)

# MODEL 5
mod.age.height.sex.resp <- lm(fev1 ~ age + height + sex + respsymptoms,
                              data = lung)
summary(mod.age.height.sex.resp)
coef(mod.age.height.sex.resp)
# Check model assumptions graphically
par(mfrow=c(2,2))
plot(mod.age.height.sex.resp)

mod1 <- lm(lung$fev1 ~ lung$age)
mod2 <- lm(lung$fev1 ~ lung$height)
mod3 <- lm(fev1 ~ age + height, data = lung)
mod4 <- lm(fev1 ~ age + height + sex, data = lung)
mod5 <- lm(fev1 ~ age + height + sex + respsymptoms,
           data = lung)
summary(mod5)

# MODEL SELECTION
AIC(mod1, mod2, mod3, mod4, mod5)
round(AIC(mod1, mod2, mod3, mod4, mod5), 2)
# Which of the models is best?
par(mfrow=c(2,2))
plot(mod5)
@
\end{itemize}

\section*{Exercise 17}
\begin{itemize}
\item Load the \texttt{ToothGrowth} data set and run the following four
linear regression models.
<<echo = FALSE, eval = TRUE>>=
data(ToothGrowth)
ToothGrowth$dose.fac <- factor(ToothGrowth$dose, levels = c(0.5, 1.0, 2.0),
                          labels = c("low", "med", "high"))
@

<<echo = TRUE, eval = FALSE>>=
mod1 <- lm(len ~ dose.fac, data = ToothGrowth)
mod2 <- lm(len ~ supp, data = ToothGrowth)
mod3 <- lm(len ~ dose.fac + supp, data = ToothGrowth)
@
\item Have a look at the summary of these models.
<<echo = FALSE, eval = FALSE>>=
mod1 <- lm(len ~ dose.fac, data = ToothGrowth)
mod2 <- lm(len ~ supp, data = ToothGrowth)
mod3 <- lm(len ~ dose.fac + supp, data = ToothGrowth)
# mod4 <- lm(len ~ dose.fac + supp + dose.fac:supp, data = ToothGrowth)
mod4 <- lm(len ~ dose.fac*supp, data = ToothGrowth)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
# Check model assumptions
par(mfrow=c(2, 2))
plot(mod1)
plot(mod2)
plot(mod3)
plot(mod4)
@
\item How do you interpret the model coefficients?
\item Which model is best?
<<echo = FALSE, eval = FALSE>>=
AIC(mod1, mod2, mod3, mod4)
# t.test(ToothGrowth$len ~ ToothGrowth$supp) # not significant
# mod4 is the best model, because it has the smallest AIC.
# THE SMALLER THE AIC, THE BETTER THE MODEL!
@
\end{itemize}

\section*{Exercise 18}
\begin{itemize}
\item Load the \texttt{water} data set and fit a multiple linear regression model.
Use \texttt{mortality} as your response variable and add \texttt{hardness} and
\texttt{location} as an explanatory variable.
<<echo = FALSE, eval = FALSE>>=
library("HSAUR3")
data("water")
str(water)
head(water)
lm.mod <- lm(mortality ~ hardness + location,
             data = water)
summary(lm.mod)
@
\item Check the underlying model assumptions.
<<echo = FALSE, eval = FALSE>>=
par(mfrow=c(2,2))
plot(lm.mod)
@
\item Add an interaction term between \texttt{hardness} and \texttt{location}
to the above estimated multiple linear regression model.
<<echo = FALSE, eval = FALSE>>=
lm.mod.int <- lm(mortality ~ hardness + location + hardness:location,
             data = water)
summary(lm.mod.int)

mod1 <- lm(mortality ~ hardness + location,
             data = water)
mod2 <- lm(mortality ~ hardness + location + hardness:location,
             data = water)
AIC(mod1, mod2)
@
\item Interpret the interaction coefficient \texttt{hardness:locationSouth}.
\item Check the underlying model assumptions.
<<echo = FALSE, eval = FALSE>>=
par(mfrow=c(2,2))
plot(lm.mod.int)
@
\item Which one is the better model? With or without the interaction term?
<<echo = FALSE, eval = FALSE>>=
AIC(lm.mod, lm.mod.int)
summary(lm.mod)
summary(lm.mod.int)
@
\item How to derive confidence intervals for the regression coefficient
of \texttt{hardness} and \texttt{location}?
<<echo = FALSE, eval = FALSE>>=
confint(lm.mod)
@
\end{itemize}


\section*{Exercise 19}
{\bfseries Hypothetical example} - from Kirkwood and Sterne, Medical Statistics, 2nd ed., p. 177
\begin{itemize}
\item Read in the data set \texttt{lepto}. This study presents a serology survey of
leptospira sero-prevalence in rural and urban areas of the west indies.
<<echo = FALSE, eval = FALSE>>=
lepto <- read.csv("~/Dropbox/201710_Makerere/03_Exercises/data/lepto.csv", sep = ";")
# SONJA
lepto <- read.csv("C:\\Users\\admin\\Dropbox\\201710_Makerere\\03_Exercises\\data\\lepto.csv",
sep = ";")
head(lepto)
str(lepto)
@
\item Encode the numeric variable \texttt{antibodies} as a factor with levels $0$ and $1$.
<<echo = FALSE, eval = FALSE>>=
table(lepto$antibodies)
class(lepto$antibodies)
lepto$antibodies <- factor(lepto$antibodies, level = c(0, 1),
                           labels = c("no", "yes"))
# Many different ways how to encode a numeric variable into a factor:
# lepto$antibodies <- factor(lepto$antibodies,
#                            levels = c(0, 1),
#                            labels = c("no", "yes"))
# lepto$antibodies <- factor(lepto$antibodies,
#                            levels = c(0, 1),
#                            labels = c("NO", "YES"))
# lepto$antibodies <- factor(lepto$antibodies,
#                            levels = c(0, 1),
#                            labels = c("Ugandian", "Kenian"))
table(lepto$antibodies)
class(lepto$antibodies)
@
\item Make a crosstable with the risk factor \texttt{exposure} and \texttt{antibodies}.
<<echo = FALSE, eval = FALSE>>=
table(lepto$exposure, lepto$antibodies)
@
\item Run a Chi-squared test, a Fisher's exact test and a logistic regression (\texttt{glm})
to assess if the \texttt{exposure} (living in rural vs. urban areas) is a risk factor.
<<echo = FALSE, eval = FALSE>>=
chisq.test(lepto$exposure, lepto$antibodies)
fisher.test(lepto$exposure, lepto$antibodies)
# fisher.test(table(lepto$exposure, lepto$antibodies))
glm.mod <- glm(antibodies ~ exposure, data = lepto,
               family = "binomial")
summary(glm.mod)
confint(glm.mod)
@
\item Create a subset for \texttt{male} and \texttt{female} based on the variable
\texttt{gender}.
<<echo = FALSE, eval = FALSE>>=
lepto.fem <- subset(lepto, gender == "female")
lepto.male <- subset(lepto, gender == "male")
@
\item Repeat the crosstable, Chi-squared test, Fisher's exact test and a logistic
regression (\texttt{glm}) for the subsets \textbf{separately}.
<<echo = FALSE, eval = FALSE>>=
# FEMALES
lepto.fem <- subset(lepto, gender == "female")
table(lepto.fem$exposure, lepto.fem$antibodies)
chisq.test(lepto.fem$exposure, lepto.fem$antibodies)
fisher.test(lepto.fem$exposure, lepto.fem$antibodies)
glm.mod.fem <- glm(antibodies ~ exposure, data = lepto.fem,
               family = "binomial")
summary(glm.mod.fem)
confint(glm.mod.fem)
# MALES
lepto.male <- subset(lepto, gender == "male")
table(lepto.male$exposure, lepto.male$antibodies)
chisq.test(lepto.male$exposure, lepto.male$antibodies)
fisher.test(lepto.male$exposure, lepto.male$antibodies)
glm.mod.male <- glm(antibodies ~ exposure, data = lepto.male,
               family = "binomial")
summary(glm.mod.male)
confint(glm.mod.male)
@
\item Does the conclusion of your research question change with the analysis of
the subsets? (Research question: Is the \texttt{exposure} (rural and urban areas)
a risk factor?)
\item Fit a logistic regression model (\texttt{glm}) with \texttt{exposure} and
\texttt{gender} as explanatory variables.
<<echo = FALSE, eval = FALSE>>=
glm.mod.final <- glm(antibodies ~ exposure + gender, data = lepto,
               family = "binomial")
summary(glm.mod.final)
# Check that exposure and gender is also associated.
glm.exp.gen <- glm(exposure ~  gender, data = lepto,
               family = "binomial")
summary(glm.exp.gen)
@
\item \textbf{SPECIAL FOR GUMA}: Is \texttt{exposure} being from an urban area
a risk factor?
<<>>=

@

\end{itemize}

% \section*{Exercise }
% \begin{itemize}
% \item ...
% \end{itemize}

% \section*{Exercise }
% \begin{itemize}
% \item ...
% \end{itemize}

% \section*{Exercise }
% \begin{itemize}
% \item ...
% \end{itemize}

% \section*{Exercise }
% \begin{itemize}
% \item ...
% \end{itemize}


\end{document}